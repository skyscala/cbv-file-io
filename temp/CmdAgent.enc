LyoNCiAqIFRvIGNoYW5nZSB0aGlzIGxpY2Vuc2UgaGVhZGVyLCBjaG9vc2UgTGljZW5zZSBIZWFkZXJzIGluIFByb2plY3QgUHJvcGVydGllcy4NCiAqIFRvIGNoYW5nZSB0aGlzIHRlbXBsYXRlIGZpbGUsIGNob29zZSBUb29scyB8IFRlbXBsYXRlcw0KICogYW5kIG9wZW4gdGhlIHRlbXBsYXRlIGluIHRoZSBlZGl0b3IuDQogKi8NCnBhY2thZ2UgY21kd2syLmVuZ2luZS5kbXM7DQoNCmltcG9ydCBjbWR3azIuZW5naW5lLnV0aWwuSHR0cFBvc3RVdGlsOw0KaW1wb3J0IGNtZHdrMi5lbmdpbmUudXRpbC5Kc29uVXRpbDsNCmltcG9ydCBjbWR3azIuZW5naW5lLnV0aWwuSHR0cFBvc3RVdGlsLlBvc3RSZXNwb25zZTsNCmltcG9ydCBqYXZhLmxhbmcucmVmbGVjdC5NZXRob2Q7DQppbXBvcnQgamF2YS51dGlsLkhhc2hNYXA7DQppbXBvcnQgamF2YS51dGlsLk1hcDsNCmltcG9ydCBqYXZhLnRleHQuU2ltcGxlRGF0ZUZvcm1hdDsNCmltcG9ydCBqYXZhLnV0aWwuQ2FsZW5kYXI7DQppbXBvcnQgamF2YS51dGlsLkRhdGU7DQppbXBvcnQgamF2YS51dGlsLmxvZ2dpbmcuTGV2ZWw7DQppbXBvcnQgamF2YS51dGlsLmxvZ2dpbmcuTG9nZ2VyOw0KDQppbXBvcnQgb3JnLmNhbXVuZGEuYnBtLmVuZ2luZS5kZWxlZ2F0ZS5EZWxlZ2F0ZUV4ZWN1dGlvbjsNCmltcG9ydCBvcmcuY2FtdW5kYS5icG0uZW5naW5lLmRlbGVnYXRlLkphdmFEZWxlZ2F0ZTsNCmltcG9ydCBvcmcuc3ByaW5nZnJhbWV3b3JrLnV0aWwuUmVmbGVjdGlvblV0aWxzOw0KDQovKioNCiAqDQogKiBAYXV0aG9yIHpsaHNvDQogKi8NCg0KcHVibGljIGNsYXNzIENtZEFnZW50IGltcGxlbWVudHMgSmF2YURlbGVnYXRlIHsNCg0KICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIExvZ2dlciBsb2c9TG9nZ2VyLmdldExvZ2dlcihDbWRBZ2VudC5jbGFzcy5nZXROYW1lKCkpOw0KICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBDTURST1VURSA9ICJjbWRVcmwiOw0KDQogICAgQE92ZXJyaWRlDQogICAgcHVibGljIHZvaWQgZXhlY3V0ZShEZWxlZ2F0ZUV4ZWN1dGlvbiBleGVjKSB0aHJvd3MgRXhjZXB0aW9uIHsNCg0KICAgICAgICBNYXA8U3RyaW5nLCBPYmplY3Q-IHZhcmlhYmxlcyA9IGV4ZWMuZ2V0VmFyaWFibGVzKCk7DQogICAgICAgIE1hcDxTdHJpbmcsIE9iamVjdD4gdHJhbnNhY3Rpb25EYXRhID0gbmV3IEhhc2hNYXA8PigpOw0KDQogICAgICAgIE1ldGhvZFtdIG1ldGhvZHMgPSBEZWxlZ2F0ZUV4ZWN1dGlvbi5jbGFzcy5nZXREZWNsYXJlZE1ldGhvZHMoKTsNCiAgICAgICAgZm9yIChNZXRob2QgbWV0aG9kIDogbWV0aG9kcykgew0KICAgICAgICAgICAgaWYgKG1ldGhvZC5nZXROYW1lKCkuc3RhcnRzV2l0aCgiZ2V0IikpIHsNCiAgICAgICAgICAgICAgICBSZWZsZWN0aW9uVXRpbHMubWFrZUFjY2Vzc2libGUobWV0aG9kKTsNCiAgICAgICAgICAgICAgICBPYmplY3QgZGF0YT1SZWZsZWN0aW9uVXRpbHMuaW52b2tlTWV0aG9kKG1ldGhvZCwgZXhlYyk7DQogICAgICAgICAgICAgICAgaWYoZGF0YSBpbnN0YW5jZW9mIFN0cmluZyl7DQogICAgICAgICAgICAgICAgICAgIHB1dERhdGEobWV0aG9kLmdldE5hbWUoKS5yZXBsYWNlRmlyc3QoImdldCIsICIiKSwgZGF0YSwgdHJhbnNhY3Rpb25EYXRhKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgdHJhbnNhY3Rpb25EYXRhLnB1dEFsbCh2YXJpYWJsZXMpOw0KICAgICAgICBPYmplY3QgY21kTGluayA9IHRyYW5zYWN0aW9uRGF0YS5nZXQoQ01EUk9VVEUpOw0KICAgICAgICBpZiAoY21kTGluayAhPSBudWxsKSB7DQogICAgICAgICAgICBwb3N0VHJhbnNhY3Rpb25EYXRhKGNtZExpbmsudG9TdHJpbmcoKS50cmltKCksIHRyYW5zYWN0aW9uRGF0YSwgZXhlYyk7DQogICAgICAgIH0NCg0KICAgIH0NCg0KICAgIHByaXZhdGUgdm9pZCBwdXREYXRhKFN0cmluZyBrLCBPYmplY3QgdmFsLCBNYXA8U3RyaW5nLCBPYmplY3Q-IHRhcmdldCkgew0KICAgICAgICB0YXJnZXQucHV0KGssIHZhbCk7DQogICAgfQ0KDQogICAgcHJpdmF0ZSB2b2lkIHBvc3RUcmFuc2FjdGlvbkRhdGEoU3RyaW5nIHJvdXRlLCBNYXA8U3RyaW5nLCBPYmplY3Q-IGRhdGEsIERlbGVnYXRlRXhlY3V0aW9uIGV4ZWMpIHsNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgbG9nLmxvZyhMZXZlbC5JTkZPLCAiUm91dGUgLSB7MH0iLCByb3V0ZSk7DQogICAgICAgICAgICBQb3N0UmVzcG9uc2UgcG9zdFJlc3BvbnNlID0gSHR0cFBvc3RVdGlsLnBvc3RKc29uKHJvdXRlLCBkYXRhKTsNCiAgICAgICAgICAgIGludCByZXNDb2RlPXBvc3RSZXNwb25zZS5nZXRTdGF0dXNDb2RlKCk7DQogICAgICAgICAgICBsb2cubG9nKExldmVsLklORk8sICJSZXNwb25zZSBDb2RlIC0gezB9IiwgcmVzQ29kZSk7DQogICAgICAgICAgICBpZiAocmVzQ29kZSE9MjAwKSB7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbigiQ01EIGNhbGwgd2FzIGZhaWwuIik7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBEYXRlIG5vdyA9IENhbGVuZGFyLmdldEluc3RhbmNlKCkuZ2V0VGltZSgpOw0KICAgICAgICAgICAgU2ltcGxlRGF0ZUZvcm1hdCBmbXQgPSBuZXcgU2ltcGxlRGF0ZUZvcm1hdCgieXl5eU1NTWRkSEhtbXNzIik7DQogICAgICAgICAgICBleGVjLnNldFZhcmlhYmxlKCJjbWRSZXN1bHRfIiArIGZtdC5mb3JtYXQobm93KSwgSnNvblV0aWwudG9Kc29uU3RyaW5nKHBvc3RSZXNwb25zZSkpOw0KDQogICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBleCkgew0KICAgICAgICAgICAgbG9nLmxvZyhMZXZlbC5JTkZPLCAiRXJyb3Igd2hpbGUgaW52b2tpbmcgY21kIC0gezB9IiwgZXguZ2V0TWVzc2FnZSgpKTsNCiAgICAgICAgICAgIHRocm93IG5ldyBSdW50aW1lRXhjZXB0aW9uKGV4KTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIA0KICAgDQp9DQo